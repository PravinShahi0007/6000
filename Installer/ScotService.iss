; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName      "Scot Production Server"
#define MyAppPublisher "Scottsdale Construction Systems Ltd"
#define MyAppURL       "http://www.scottsdalesteelframes.com"
#define MyAppExeName   "ScotService.exe"
#define FileVerStr GetFileVersion("C:\ScotRFProductionOutput\Bin\ScotService.exe")

[Setup]
AppName            = {#MyAppName}
AppVerName         = {#MyAppName} {#FileVerStr}
VersionInfoVersion = {#FileVerStr}
AppPublisher       = {#MyAppPublisher}
AppPublisherURL    = {#MyAppURL}
AppSupportURL      = {#MyAppURL}
AppUpdatesURL      = {#MyAppURL}
DefaultDirName     = {pf}\SCS\{#MyAppName}
DefaultGroupName   = SCS\{#MyAppName}
SetupIconFile      = ..\ScotDashboard\ScotRF.ico
Compression        = lzma
SolidCompression   = yes
OutputDir          = .\Output
OutputBaseFilename = ScotServer_{#FileVerStr}_Setup

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: ".\dll\dbxfb.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\dll\fbclient.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\ScotRFProductionOutput\Bin\ScotService.exe"; DestDir: "{app}"; Flags: ignoreversion; Components: Server

[Types]
Name: "Server"; Description: "Scot Production Service Installation"; Flags: iscustom

[Components]
Name: Server; Description: Scot Production Service; Types: Server; Flags: disablenouninstallwarning

[Code]

var
  ResultCode: Integer;
  strScotBasePath: String;

procedure InstallService(const ServiceName: String; ExeName: String);
begin
  { if the service doesn't exist then create it with default params }
  if not RegKeyExists(HKEY_LOCAL_MACHINE, 'System\CurrentControlSet\Services\ServiceScot') then
  begin
    Exec(strScotBasePath + '\' + ExeName + '.exe', ' /install /silent', strScotBasePath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;

Procedure UninstallService(const ServiceName: String; ExeName: String);
begin
  if RegKeyExists(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\ServiceScot') then
    begin
      Exec(strScotBasePath + '\' + ExeName + '.exe', ' /uninstall /silent', strScotBasePath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end;
end;

{ UpdateFirewall,This is called once installation is complete. Its purpose is to poke holes in the firewall for Windows XP, Vista and 2008}

procedure UpdateFirewall();
var
  strPath,
  strAppExeName: String;
begin
  strPath := ExpandConstant('{app}');
  strAppExeName := ExpandConstant('{#MyAppExeName}');
  if FileExists(strPath + '\' + strAppExeName) then
    Exec('cmd', '/C netsh firewall set allowedprogram "' + strPath + '\' + strAppExeName + '" "Scot Production Application" ENABLE ALL', strPath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
  if FileExists(strPath + '\ScotService.exe') then
    Exec('cmd', '/C netsh firewall set allowedprogram "' + strPath + '\ScotService.exe" "Scot Production Service" ENABLE ALL', strPath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

{ DeleteFirewall, This is called on uninstallation. Its purpose is to remove holes in the firewall for Windows XP, Vista and 2008}

procedure DeleteFirewall();
var
  strPath,
  strAppExeName: String;
begin
  strPath := ExpandConstant('{app}');
  strAppExeName := ExpandConstant('{#MyAppExeName}');
  if FileExists(strPath + '\' + strAppExeName) then
    Exec('cmd', '/C netsh firewall delete allowedprogram "' + strPath + '\' + strAppExeName + '"', strPath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
  if FileExists(strPath + '\ScotService.exe') then
    Exec('cmd', '/C netsh firewall delete allowedprogram "' + strPath + '\ScotService.exe"', strPath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

{ CurStepChanged Event Used for catching just before and just after installation }

procedure CurStepChanged(CurStep: TSetupStep);
var
  sTasks : String;
begin
  case CurStep of
    { called just before the actual installation starts }
    ssInstall:
      begin
        strScotBasePath := ExpandConstant('{app}'); { convert path to real path from now onwards }
        Exec('net', 'stop "Service Scot"', strScotBasePath, SW_HIDE, ewWaitUntilTerminated, ResultCode); { stop the service if it exists }
        UninstallService('Service Scot', 'ScotService'); { uninstall existing service if it exists }
      end;
    ssPostInstall:
      { called after install but before the dialog disappears }
      begin
        InstallService('Service Scot', 'ScotService');
        Exec('net', 'start "Service Scot"', strScotBasePath, SW_HIDE, ewWaitUntilTerminated, ResultCode); { start the service}
        DeleteFirewall();
        UpdateFirewall();
      end;
  end;
end;

function GetScotPath(Param: String): String;
begin
  RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\ScotService', 'ImagePath', strScotBasePath);
  if not FileExists(strScotBasePath) then
  begin
    strScotBasePath := ExpandConstant('{pf}\SCS\Scot Production Server')
  end
  else
  begin
    strScotBasePath := ExtractFilePath(strScotBasePath);
  end;
  Result := strScotBasePath;
end;

{ CurUninstallStepChanged
Before we can start removing files and folders we need to shutdown all apps and
services and uninstall the services
}
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  DeleteFirewall();
  GetScotPath('');
  { stop and uninstall the service }
  Exec('net', 'stop "Service Scot"', strScotBasePath, SW_HIDE, ewWaitUntilTerminated, ResultCode);
  UninstallService('ScotService', 'ScotService');
end;
